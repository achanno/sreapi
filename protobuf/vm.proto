syntax = "proto3";

import "google/api/annotations.proto";

package sreapi;

/*
message Project {
  string _api = 1;
  string name = 2;
  repeated Stack stacks = 3;
}

message Stack {
  string _api = 1;
  repeated Role roles = 2;
}

message Role {
  string _api = 1;
  string name = 2;
  Role parent = 3;
}
*/
message Virtualmachine {
  string _api = 1;
  string hostname = 2;
  Role role = 3;
}


message ListVMRequest{
  string _api = 1;
  Virtualmachine filter = 2;
}

message ListVMResponse {
  string _api = 1;
  repeated Virtualmachine vms = 2;
}

message GetVMRequest {
  string _api = 1;
  Virtualmachine filter = 2;
}

message GetVMResponse {
  string _api = 1;
  Virtualmachine vm = 2;
}

message CreateVMRequest {
  string _api = 1;
  Virtualmachine vm = 2;
}

message CreateVMResponse {
  string _api = 1;
  bool success = 2;
}

message UpdateVMRequest {
  string _api = 1;
  Virtualmachine oldvm = 2;
  Virtualmachine newvm = 3;
}

message UpdateVMResponse {
  string _api = 1;
  bool success = 2;
}

message DeleteVMRequest {
  string _api = 1;
  Virtualmachine target = 2;
}

message DeleteVMResponse {
  string _api = 1;
  bool success = 2;
}

service Virtualmachines {
  rpc List (ListVMRequest) returns (ListVMResponse) {
    option (google.api.http) = {
      get: "/v1/vm/{Virtualmachine}",
    };
  }
  rpc Get (GetVMRequest) returns (GetVMResponse) {
    option (google.api.http) = {
      get: "/v1/vm/{Virtualmachine}",
    };
  }
  rpc Create (CreateVMRequest) returns (CreateVMResponse) {
    option (google.api.http) = {
      post: "/v1/vm/{Virtualmachine}",
      body: "*"
    };
  }
  rpc Update (UpdateVMRequest) returns (UpdateVMResponse) {
    option (google.api.http) = {
      patch: "/v1/vm/{Virtualmachine}",
      body: "Virtualmachine"
    };
  }
  rpc Delete (DeleteVMRequest) returns (DeleteVMResponse) {
    option (google.api.http) = {
      delete: "/v1/vm/{Virtualmachine}"
    };
  }
}
